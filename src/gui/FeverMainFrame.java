/*
 * FeverMainFrame.java
 *
 * Created on Mar 4, 2014, 10:07:58 AM
 */
package gui;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.regex.Pattern;

import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

import db.PathwayImpl;
import io.ExportUtils;
import main.AnalysisParams;
import main.Dataset;
import main.DebugToolbox;
import main.MessageConsole;
import main.ResourceList;

/**
 * 
 * @author ufuk
 */
public class FeverMainFrame extends javax.swing.JFrame 
								implements InternalFrameListener{

	/**
	 * 
	 */
	private static final long serialVersionUID = -6850412575806885090L;
	public static Logger logger = Logger.getLogger(PathwayImpl.class.getName());

	
	/** Creates new form FeverMainFrame */
	public FeverMainFrame() {
		
		this.openAnalyses = new LinkedHashMap<String, SingleAnalysisTask>();
		this.openFrames = new LinkedHashMap<String, JInternalFrame>();
		this.session_id = DebugToolbox.getSessionID();
		this.infiGlass = new InfiniteProgressPanel("Processing, please wait...", 20, 0.5f, 15f);
		setGlassPane(infiGlass);
		initComponents();
		
		MessageConsole console = new MessageConsole(mainPanel.getTextPane());
		console.redirectOut(null, System.out);
		console.redirectErr(Color.RED, System.err);
		console.setMessageLines(1000);
		
		System.out.println("Running FEvER 38.2C alpha bleeding...");
		pack();

	}
	
	/**
	 * Provides an unmodifiable view of open analyses
	 */
	public Map<String, JInternalFrame> getOpenAnalyses(){
		//TODO reconsider the return type of the analyses
		return Collections.unmodifiableMap(openFrames);
	}
	
	public void activateInfiGlass(){
    	this.infiGlass.start();
    }
        
    public void deactivateInfiGlass(){
    	this.infiGlass.stop();
    }

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new gui.FeverMainPanel();
        menuBar = new javax.swing.JMenuBar();
        optionsMenu = new javax.swing.JMenu();
        newAnalysisMenuOption = new javax.swing.JMenuItem();
        newBatchAnalysisMenuOption = new javax.swing.JMenuItem();
        loadMenuOption = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitOption = new javax.swing.JMenuItem();
        analysisMenu = new javax.swing.JMenu();
        saveAnalysisMenuOption = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        getHelpOnlineMenuOption = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FEvER 38,2\u2103");

        optionsMenu.setText("Options");

        newAnalysisMenuOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        newAnalysisMenuOption.setText("Start new analysis...");
        newAnalysisMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAnalysisMenuOptionActionPerformed(evt);
            }
        });
        optionsMenu.add(newAnalysisMenuOption);

        newBatchAnalysisMenuOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        newBatchAnalysisMenuOption.setText("Start new batch analysis...");
        newBatchAnalysisMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBatchAnalysisMenuOptionActionPerformed(evt);
            }
        });
        optionsMenu.add(newBatchAnalysisMenuOption);

        loadMenuOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        loadMenuOption.setText("Load old analysis...");
        loadMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuOptionActionPerformed(evt);
            }
        });
        optionsMenu.add(loadMenuOption);
        optionsMenu.add(jSeparator1);

        quitOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        quitOption.setText("Quit");
        quitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitOptionActionPerformed(evt);
            }
        });
        optionsMenu.add(quitOption);

        menuBar.add(optionsMenu);

        analysisMenu.setText("Analysis");

        saveAnalysisMenuOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        saveAnalysisMenuOption.setText("Save analysis to disk");
        saveAnalysisMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAnalysisMenuOptionActionPerformed(evt);
            }
        });
        analysisMenu.add(saveAnalysisMenuOption);

        menuBar.add(analysisMenu);

        helpMenu.setText("Help?");

        getHelpOnlineMenuOption.setText("HOW-TO document");
        getHelpOnlineMenuOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getHelpOnlineMenuOptionActionPerformed(evt);
            }
        });
        helpMenu.add(getHelpOnlineMenuOption);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void quitOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitOptionActionPerformed
		System.out.println("#DEBUG: quit action");
		int userInput = JOptionPane.YES_OPTION;
		if(openFrames.size() != 0){
			userInput=JOptionPane.showConfirmDialog(null, "There are open analyses, are you sure you want to quit?", 
	    			"Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
		}
		
		if(userInput == JOptionPane.YES_OPTION)
			gracefullyQuit();	
			
	}//GEN-LAST:event_quitOptionActionPerformed

	private void newAnalysisMenuOptionActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newAnalysisMenuOptionActionPerformed
		    	
		String title = JOptionPane.showInputDialog("Please give a title to your analysis");
		while(openFrames.containsKey(title))
			title = JOptionPane.showInputDialog(null,
				"<html>Cannot initiate analysis with given title: "
				+ "<p>An analysis with the same title is already open, "
				+ "please give a new title...", "Duplicate title!",JOptionPane.ERROR_MESSAGE);
		
		InternalAnalysisFrame frame = mainPanel.newAnalysisFrame(title, this);
		SingleAnalysisTask task = new SingleAnalysisTask(frame);
		openAnalyses.put(title, task);
		SwingUtilities.invokeLater(task);
		
	}// GEN-LAST:event_newAnalysisMenuOptionActionPerformed

	private void newBatchAnalysisMenuOptionActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newBatchAnalysisMenuOptionActionPerformed
		/*
		 * TODO 
		 * -Drag'n Drop field for all datafiles 
		 * -Show dialog noting that the analyses will be named based on filename 
		 * -Ask for parameters: load from file or enter manually 
		 * -Run analyses one by one (with corresponding JInternalFrame)
		 */
		BatchAnalysisDialog dialog = new BatchAnalysisDialog(new JFrame(), true);
		dialog.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e){
				((BatchAnalysisDialog)e.getWindow()).getFiles();
			}
		});
		dialog.setLocationRelativeTo(null);
		dialog.setVisible(true);
		
	}// GEN-LAST:event_newBatchAnalysisMenuOptionActionPerformed

	private void loadMenuOptionActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadMenuOptionActionPerformed
		/*
		 * TODO 
		 * -JFileChooser to pick the analysis file 
		 * -Start a new JInternalFrame
		 */
	}// GEN-LAST:event_loadMenuOptionActionPerformed

	private void saveAnalysisMenuOptionActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveAnalysisMenuOptionActionPerformed
		/*
		 * TODO JFileChooser to pick folder to save file
		 */
		String analysisName = mainPanel.getDesktop().getSelectedFrame().getTitle();
		openAnalyses.get(analysisName).exportAction();

	}// GEN-LAST:event_saveAnalysisMenuOptionActionPerformed

	private void getHelpOnlineMenuOptionActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_getHelpOnlineMenuOptionActionPerformed

		// TODO UPDATE when new how-to is available
		try {
			URI help_page = new URI("http://quantitativeproteomics.org/fever");
			Desktop.getDesktop().browse(help_page);
		} catch (URISyntaxException e1) {
			JOptionPane.showMessageDialog(null, e1.getMessage(), "error",
					JOptionPane.ERROR_MESSAGE);
			e1.printStackTrace();
		} catch (IOException e2) {
			JOptionPane.showMessageDialog(null, e2.getMessage(), "error",
					JOptionPane.ERROR_MESSAGE);
			e2.printStackTrace();
		}
	}// GEN-LAST:event_getHelpOnlineMenuOptionActionPerformed
	
	private void gracefullyQuit(){
		// TODO: revise?
		System.out.println("Quiting FEvER environment...");
		System.exit(0);
	}
	
	private static void test(){
		System.out.println("### DEBUG printing all resource files");
//		for(final String name : ResourceList.getResources(Pattern.compile(".*"))){
//		    System.out.println(name);
//		}
		
		System.out.println(ExportUtils.class.getResource("res"));
		System.out.println(ExportUtils.class.getClassLoader().getResource("res"));
		System.out.println(ExportUtils.class.getClassLoader().getSystemClassLoader().getResource("res"));
		System.out.println(ExportUtils.class.getResource("/res"));
		System.out.println(ExportUtils.class.getClassLoader().getResource("/res"));
		System.out.println(ExportUtils.class.getClassLoader().getSystemClassLoader().getResource("/res"));	
	}
	
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(FeverMainFrame.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(FeverMainFrame.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(FeverMainFrame.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(FeverMainFrame.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		if(!LOGDIR.exists())
			LOGDIR.mkdir();
		
		if(!DBDIR.exists())
			DBDIR.mkdir();
		
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				FeverMainFrame fmf = new FeverMainFrame();
				try {
					String path = LOGDIR.getName();
					path = path + "/f" + fmf.session_id + ".log";
					FileHandler fh = new FileHandler(path);
					fh.setFormatter(new SimpleFormatter());
					logger.addHandler(fh);
					logger.setLevel(Level.INFO);
					logger.info("Initiating analysis.." + System.lineSeparator());
					
					if(DODEBUG){
						test();
					}
					
				} catch (SecurityException | IOException e) {
					// TODO Auto-generated catch block
					System.err.println("Cannot initiate the session log");
					e.printStackTrace();
				}
				fmf.setLocationRelativeTo(null);
				//fmf.setExtendedState(Frame.MAXIMIZED_BOTH);
				fmf.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu analysisMenu;
    private javax.swing.JMenuItem getHelpOnlineMenuOption;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem loadMenuOption;
    private gui.FeverMainPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newAnalysisMenuOption;
    private javax.swing.JMenuItem newBatchAnalysisMenuOption;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem quitOption;
    private javax.swing.JMenuItem saveAnalysisMenuOption;
    // End of variables declaration//GEN-END:variables
    
    private final LinkedHashMap<String, SingleAnalysisTask> openAnalyses;
    private final LinkedHashMap<String, JInternalFrame> openFrames;
    private final String session_id; 
	private InfiniteProgressPanel infiGlass;

    public static final File LOGDIR = new File("log");
	public static final File DBDIR = new File("db");
	public static final boolean DODEBUG = false;
	
    public static final HashMap<Class, Integer> exitCodes = new HashMap<Class, Integer>();
    static{
    	exitCodes.put(AnalysisParams.class, 1);
    	exitCodes.put(Dataset.class, 2);
    	exitCodes.put(PreviewPanel.class, 3);
    };
    
    
    // EVENT HANDLERS
    // =================================
	@Override
	public void internalFrameOpened(InternalFrameEvent e) {
		JInternalFrame frame = e.getInternalFrame();
		openFrames.put(frame.getTitle(), frame);
	}

	@Override
	public void internalFrameClosing(InternalFrameEvent e) {	}

	@Override
	public void internalFrameClosed(InternalFrameEvent e) {
		String title = e.getInternalFrame().getTitle();
		if(openFrames.remove(title) == null)
			openAnalyses.remove(title);
	}

	@Override
	public void internalFrameIconified(InternalFrameEvent e) {	}

	@Override
	public void internalFrameDeiconified(InternalFrameEvent e) {	}

	@Override
	public void internalFrameActivated(InternalFrameEvent e) {	}

	@Override
	public void internalFrameDeactivated(InternalFrameEvent e) {	}
}
