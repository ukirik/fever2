/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DbSelectionDialog.java
 *
 * Created on Jun 25, 2014, 9:20:41 AM
 */
package gui;

import it.sauronsoftware.ftp4j.FTPAbortedException;
import it.sauronsoftware.ftp4j.FTPClient;
import it.sauronsoftware.ftp4j.FTPDataTransferException;
import it.sauronsoftware.ftp4j.FTPDataTransferListener;
import it.sauronsoftware.ftp4j.FTPException;
import it.sauronsoftware.ftp4j.FTPIllegalReplyException;
import it.sauronsoftware.ftp4j.FTPListParseException;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.channels.FileChannel;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListModel;
import javax.swing.SwingWorker;
import javax.swing.WindowConstants;

import main.DebugToolbox;
import db.PathwayImpl;

/**
 *
 * @author ufuk
 */
public class DbSelectionDialog extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7169209328085985001L;
	public static Logger logger = Logger.getLogger(PathwayImpl.class.getName());

	
    /** Creates new form DbSelectionDialog */
    public DbSelectionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        this.getRootPane().registerKeyboardAction(
        		new ActionListener() {	
        			@Override
        			public void actionPerformed(ActionEvent e) {
        				setVisible(false);
        			}
        		}, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_IN_FOCUSED_WINDOW);
        
		initComponents();
    }
    
    public File getFile(){
    	return dbFile;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        fileList = new JList<File>((new File("db").listFiles(new FilenameFilter() {			
			@Override
			public boolean accept(File dir, String name) {
				if(name.endsWith(".script"))
					return true;
				return false;
			}
		})));
        descLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        moreButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrollPane.setViewportView(fileList);

        descLabel.setText("Available DB files");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        moreButton.setText("Get more...");
        moreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(moreButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)))
                    .addComponent(descLabel))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(browseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moreButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(descLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
    	JFileChooser jfc = new JFileChooser();
		Point loc = getLocation();
		loc.translate(20, 20);
		jfc.setLocation(loc);
		jfc.setVisible(true);
		jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

		if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
			File f = jfc.getSelectedFile(),
				 copy = new File(FeverMainFrame.DBDIR, f.getName());
			
			
			if(!copy.exists()){
				FileChannel inputChannel = null;
				FileChannel outputChannel = null;	
				FileInputStream fis;
				FileOutputStream fos;
				try {
					fis = new FileInputStream(f);
					inputChannel = fis.getChannel();
					
					fos = new FileOutputStream(copy);
					outputChannel = fos.getChannel();
					outputChannel.transferFrom(inputChannel, 0, inputChannel.size());
					
					fis.close(); 
					fos.close();
					inputChannel.close();
					outputChannel.close();
					
					String s = f.getName().substring(0, f.getName().indexOf("."));
					fis = new FileInputStream(new File(f.getParentFile(), s + ".properties"));
					inputChannel = fis.getChannel();
					
					fos = new FileOutputStream(new File(copy.getParentFile(), s + ".properties"));
					outputChannel = fos.getChannel();
					outputChannel.transferFrom(inputChannel, 0, inputChannel.size());
					
					fis.close(); 
					fos.close();
					inputChannel.close();
					outputChannel.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					logger.warning("Could not copy the chosen file to 'db' folder,  "
							+ "see stack trace below! " 
							+ System.lineSeparator()
							+ DebugToolbox.getStackTraceAsString(e));
				} 
			}
			dbFile = f;
			dispose();
		}    
	}//GEN-LAST:event_browseButtonActionPerformed

    private void moreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreButtonActionPerformed
    	final FTPClient client = new FTPClient();
    	final InfiniteProgressPanel ipp = new InfiniteProgressPanel("Downloading file...");
		setGlassPane(ipp);
		try {
			client.connect("temp-ftp.immunoprot.lth.se");
			client.login("anonymous", "");
			client.changeDirectory("opendir");
			
			Object[] availableFiles = client.listNames();
			final String s = (String)JOptionPane.showInputDialog(
			                    this,
			                    "Available database files",
			                    "Choose a database file...",
			                    JOptionPane.PLAIN_MESSAGE,
			                    null,
			                    availableFiles, null);
			
			if(s == null)
				return;
			
			String dbName = (String) s.subSequence(0, s.indexOf('.'));
			final File f = new File(FeverMainFrame.DBDIR, s);
			final File prop_file = new File(FeverMainFrame.DBDIR, dbName + ".properties");
			
			ipp.start();
			(new SwingWorker<Void, Void>() {
				@Override
				protected Void doInBackground() throws Exception {
					client.download(s, f, new FTPDataTransferListener() {
						
						@Override
						public void transferred(int arg0) {}
						
						@Override
						public void started() {
							System.out.println("Starting file transfer, please wait...");
							logger.info("Starting file transfer, please wait..." + 
			    					System.lineSeparator());
						}	
						
						@Override
						public void failed() {
							System.err.println("File transfer failed");
							logger.warning("File transfer failed" + System.lineSeparator());
						}
						
						@Override
						public void completed() {
							try {
								prop_file.createNewFile();
								DateFormat df = new SimpleDateFormat("EEE MMM dd HH:mm:ss YYYY");
								String t = df.format(new Date(System.currentTimeMillis()));
								PrintWriter writer = new PrintWriter(
										new BufferedWriter(new FileWriter(prop_file)));
								writer.println("#HSQL Database Engine 2.3.2");
								writer.println("#" + t);
								writer.println("version=2.3.2");
								writer.println("hsqldb.script_format=3");
								writer.println("modified=no");
								writer.close();
							} catch (IOException e) {
								logger.severe("Could not generate the prop file for the database: " 
										+ System.lineSeparator() 
										+ DebugToolbox.getStackTraceAsString(e)
										+ System.lineSeparator());
								e.printStackTrace();
							}
										
							System.out.println("File transfer completed successfully");
							logger.info("File transfer completed successfully" + 
			    					System.lineSeparator());
							
						}
						
						@Override
						public void aborted() {
							System.err.println("File transfer aborted");
							logger.warning("File transfer aborted" + 
			    					System.lineSeparator());
						}
					});
					return null;
				}
				
				@Override
				protected void done(){
					try{
						get();
					}catch(Exception e){
						e.printStackTrace();
					}
					ipp.stop();
					updateFileList(f);	
				}
			}).execute();
				
						
		} catch (IllegalStateException | IOException | FTPIllegalReplyException
				| FTPException | FTPDataTransferException | FTPAbortedException | FTPListParseException e) {
			System.err.println("Latest list of DB files could not be retrieved");
			e.printStackTrace();
		}
		

    }//GEN-LAST:event_moreButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        dbFile = fileList.getSelectedValue();
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void updateFileList(File f){
    	DefaultListModel<File> model = new DefaultListModel<File>();
		ListModel<File> old = fileList.getModel();
		for(int i=0; i < old.getSize(); i++)
			model.addElement(old.getElementAt(i));
		
		model.addElement(f);
		fileList.setModel(model);
		fileList.repaint();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel descLabel;
    private javax.swing.JList<File> fileList;
    private javax.swing.JButton moreButton;
    private javax.swing.JButton okButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    
    private File dbFile;
}
